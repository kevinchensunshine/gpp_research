/**
 * Given a Date and Year, this script maps the GPP of that day over the state of California. The GPP is predicted used a rectangular hyperbola model
 * Usage: Create an asset folder, and have the path defined as path. Define a Date and an Year, and then run
 */
 
//User defined values:
//--------------------------------------------------------------------------------------------------------------------------------------------------//
var date = '2021-09-01';
var year = '2021';
var path = 'users/kevinlc3/california_field_level_gpp_' + date;
//--------------------------------------------------------------------------------------------------------------------------------------------------//

var gpp_utils = require('users/kevinlc3/ndvi_nir_collection:Utils/GPP_Processing_Lib');
var model = require('users/kevinlc3/ndvi_nir_collection:Model/gpp_model');

var bands = ['Mean_NIRVP'];
            
var export_bands = 
            ['Mean_NIRVP_Hyperbola_GPP'];

var strawberry_fields_california = ee.FeatureCollection('users/kevinlc3/strawberry_fields_cdl_csba_intersect_' + year);

var startDate = year + '-1-1';
var endDate = year + '-12-30';
var nirv_collection = ee.ImageCollection('NASA/HLS/HLSL30/v002')
  .filterDate(startDate, endDate);
  
nirv_collection = gpp_utils.cleanHLS(nirv_collection);
nirv_collection = gpp_utils.calcNIRV(nirv_collection);
  
var par_collection = ee.ImageCollection('MODIS/061/MCD18C2')
  .filterDate(date, ee.Date(date).advance(1, 'day'));

function aggregate_par(image) {
    // Define the band names to be averaged
    var bandNames = [
        'GMT_0000_PAR', 'GMT_0300_PAR', 'GMT_0600_PAR', 'GMT_0900_PAR',
        'GMT_1200_PAR', 'GMT_1500_PAR', 'GMT_1800_PAR', 'GMT_2100_PAR'
    ];

    // Select the bands from the image
    var selectedBands = image.select(bandNames);

    // Calculate the mean of the selected bands
    // Multiply by 4.57 to convert from W/m^2 to umol m-2 s-1
    var meanPar = selectedBands.reduce(ee.Reducer.mean()).multiply(4.57);

    // Add the mean band to the original image and rename it to 'Mean_PAR'
    return image.addBands(meanPar.rename('Mean_PAR')).select('Mean_PAR');
}

function multiplyBands(image) {
  var nirvBand = image.select('d_0_NIRV');
  var meanParBand = image.select('Mean_PAR');

  return image.addBands([nirvBand.multiply(meanParBand).rename('Mean_NIRVP')]);
}

function gpp_predictor(field) {
  
  var roi = field.geometry();
  //Reduce geometry to batched area
  var nirv_field = nirv_collection.filterBounds(roi);
                                  
  var par_field = par_collection.filterBounds(roi);
  
  par_field = par_field.map(aggregate_par);
  
  //Interpolate to weekly intervals
  nirv_field = gpp_utils.interpolateCollection(nirv_field, 7, roi).select(['NIRV']);
  
  //Apply an SG-filter
  nirv_field = gpp_utils.applySGFilter(nirv_field, 3);
  
  //Interpolate matching values for PAR
  nirv_field = gpp_utils.alignCollections(par_field, nirv_field.select(['d_0_NIRV']), roi);
  
  var nirvp = function(nirv_image) {
    var date = nirv_image.get('system:time_start');
    var par_image = par_field
                    .filter(ee.Filter.equals('system:time_start', date)).first();
    return nirv_image.addBands(par_image);
  };
  
  //Combine nirv and par bands into one image collection
  var nirvp_collection = nirv_field.map(nirvp);
  var nirvp_field = nirvp_collection.map(multiplyBands).first();
  
  //Run the rectangular hyperbola
  var predicted_gpp_field = model.applyHyperbola(nirvp_field, bands);
  
  return predicted_gpp_field.select(export_bands).clip(roi);
}

//https://google-earth-engine.com/Advanced-Topics/Scaling-up-in-Earth-Engine/
var n = strawberry_fields_california.size().getInfo();
var field_list = strawberry_fields_california.toList(n);
var stride = Math.ceil(n / 100);

for (var i = 0; i < n; i += stride) {
  
  print(i);
  
  //Process fields in batches of 16
  var end = i + stride;
  if (end > n) {
      end = n;
  }
  var batch = field_list.slice(i, end);
  
  batch = ee.FeatureCollection(batch);
  //In order to preserve crop borders now, we need to map this batch to process each feature individually
  //First retrieve the pixel-wise computation
  var pixel_wise_prediction_collection = ee.ImageCollection(batch.map(gpp_predictor));
  //now map each feature to add a reduced field-level band. 
  //This returns a featurecollection where each feature has the corresponsing geometry and mean values of each field as a property
  var field_level_prediction_collection = ee.FeatureCollection(pixel_wise_prediction_collection.map(gpp_utils.calculate_field_level));
  
  field_level_prediction_collection = field_level_prediction_collection.set({
                                                                              timestamp: date, 
                                                                              stride: stride,
                                                                              size: n
                                                                              });

  // Define the asset ID for each batch
  var assetId = path + '/batch_' + i;
  // Export each batch to an asset
  var asset = Export.table.toAsset({
    collection: field_level_prediction_collection,
    description: 'Batch_' + i,
    assetId: assetId
  });
  
}

print("finished");

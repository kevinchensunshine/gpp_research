var plot = require('users/kevinlc3/ndvi_nir_collection:Plot');

var asset_path_collection = "users/kevinlc3/california_field_level_gpp/"
var batch_list = []

for (var i = 0; i < 2977; i += 31) {
  batch_list.push("batch_" + i);
}

print(batch_list)

var gpp_utils = require('users/kevinlc3/ndvi_nir_collection:GPP_Processing_Lib');

var gpp_coll = gpp_utils.mergeCollection(asset_path_collection, batch_list);


Map.setCenter(-119.12944008337774, 34.238211739422134, 15)

var minGppValue = gpp_coll.aggregate_min('NIRVP1800_Hyperbola_GPP').getInfo();
var maxGppValue = gpp_coll.aggregate_max('NIRVP1800_Hyperbola_GPP').getInfo();

print(maxGppValue)
print(minGppValue)
var range = maxGppValue - minGppValue;

function createNormalizedImage(feature) {
  feature = ee.Feature(feature);
  var value = feature.getNumber('NIRVP1800_Hyperbola_GPP');
  return ee.Image.constant(value).toFloat().clip(feature.geometry());
}

// Create an ImageCollection with normalized images
var normalizedImageCollection = ee.ImageCollection(gpp_coll.map(createNormalizedImage));

// Visualization parameters for the normalized GPP values
var visParams = {
  bands: ['constant'],
  min: 0,
  max: 1,
  palette: ['FFCC33', 'FF3333']  // From black to white
};

Map.addLayer(normalizedImageCollection, plot.create_representation(minGppValue, maxGppValue), "Normalized GPP Visualization");
Map.add(plot.create_legend(minGppValue, maxGppValue));

// Your initial setup
var year = '2022'
var csbca22 = ee.FeatureCollection("projects/nass-csb/assets/csb1522/CSBCA1522");
var california_bound = ee.FeatureCollection('TIGER/2016/States')
            .filter(ee.Filter.eq('NAME', 'California'));
var cdl = ee.ImageCollection('USDA/NASS/CDL')
                  .filter(ee.Filter.date(year + '-01-01', year + '-12-01'))
                  .filterBounds(california_bound)
                  .first();

// Filter for strawberry fields
var strawberry_layer_csbca22 = csbca22.filter(ee.Filter.eq('CROP22', 'Strawberries'));

// Visualization Parameters
var visParams = {
  color: 'black',
  fillColor: 'ff0000' // Red fill color
};

// Adding layers to the map
Map.addLayer(strawberry_layer_csbca22, visParams, "Strawberry Fields");

// Mask the CDL image to keep only strawberry classified areas
var cropLandcover = cdl.select('cropland')
// Create a mask where the cropland is equal to 211 (strawberries)
var strawberriesMask = cropLandcover.eq(221);
// Apply the mask to the dataset
var strawberries = cropLandcover.updateMask(strawberriesMask);


// Add masked CDL to the map
Map.addLayer(strawberries, {}, 'CDL Strawberry Areas');

var vectorStrawberryFields = strawberries.reduceToVectors({
  geometry: strawberry_layer_csbca22.geometry(),
  scale: 30, // Adjust the scale based on your data's resolution
  maxPixels: 1e9
});


// Process each strawberry field
var strawberry_geom = vectorStrawberryFields.geometry();

var majority_vote_strawberies = strawberry_layer_csbca22.map(function(feature) {
  return feature.intersection(strawberry_geom, 1);
});

var state_outline = Map.addLayer(majority_vote_strawberies, visParams, "majority vote") 

print(majority_vote_strawberies.first())

var n = majority_vote_strawberies.size().getInfo();

//export to asset is really slow right now. Let's try parallelizing it
//google earth engine allows 40 concurrent tasks at a time. This ensures best performance by splitting up 40 evenly
var stride = Math.ceil(n / 40);

for (var i = 0; i < n; i += stride) {
  var end = i + stride;
  if (end > n) {
    end = n;
  }

  var batch = majority_vote_strawberies.toList(stride, i); // Get a batch of features
  var batchFeatureCollection = ee.FeatureCollection(batch);

  // Define the asset ID for each batch
  var assetId = 'users/kevinlc3/csbca_strawberries_field_level_' + year + '/batch_' + i;

  // Export each batch to an asset
  var asset = Export.table.toAsset({
    collection: batchFeatureCollection,
    description: 'Batch_' + i,
    assetId: assetId
  });
  
}

print("Export tasks initialized");


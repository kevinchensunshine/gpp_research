//Define the rectangular hyperbola model

class SquareHyperbolaModel {
  
  //define the model constants
  constructor(a, b) {
    this.a = a;
    this.b = b;
  }
  
  //run the model over the input array x, which should be a set of nirv values
  fit(x) {
    var applyHyperbola = function(nirvp) {
      return (a * nirvp) / (b + nirvp);
    }
    
    return x.map(applyHyperbola);
  }
  
  //run the model over an imagecollection input, which should have an NDVI band
  fit_image_collection(x) {
    var applyHyperbola = function(image) {
        var nirv = image.select('NIRV');

        var hyperbolaNDVI = nirv.expression(
            '((a * x) / (b + x))', {
                'x': nirv,
                'a': a,
                'b': b
            });

        return image.addBands(hyperbolaNDVI.rename('Hyperbola_NDVI'), null, true);
    };

    return x.map(applyHyperbola);
  }
}

function applyScaleFactors(image) {
  var opticalBands = image.select('B.').multiply(0.0001);
  return image.addBands(opticalBands, null, true)
}

var bitwiseExtract = function(input, fromBit, toBit) {
  if (toBit === undefined) toBit = fromBit
  var maskSize = ee.Number(1).add(toBit).subtract(fromBit)
  var mask = ee.Number(1).leftShift(maskSize).subtract(1)
  return input.rightShift(fromBit).bitwiseAnd(mask)
}

function maskAerosols(image) {
  var qa_aerosol = image.select(['SR_QA_AEROSOL']);
  var aerosol_bit = bitwiseExtract(qa_aerosol, 6, 7)

  var mask = qa_aerosol.bitwiseAnd(aerosol_bit).eq(0)
  return image.updateMask(mask).copyProperties(image).set('system:time_start', image.get('system:time_start'));
}

function maskClouds(image) {
  var qa = image.select('Fmask');
  var cirrus = image.select('B9')

  // Bit 1 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 1;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0);
  return image.updateMask(mask).copyProperties(image).set('system:time_start', image.get('system:time_start'));
}

function dataset_ndvi(image) {
  var ndvi = image.normalizedDifference(['B5', 'B4']).rename('NDVI');
  return image.addBands(ndvi);
}

function dataset_nirv(image) {
  var nirv = image.select('NDVI').multiply(image.select('B5')).rename('NIRV');
  return image.addBands(nirv);
}

//load nirv data
var startDate = '2023-02-9';
var endDate = '2023-11-14';
var nirv_collection = ee.ImageCollection('NASA/HLS/HLSL30/v002')
  .filterDate(startDate, endDate)
  //.filterBounds(geometry)
  .map(maskClouds)
  .map(dataset_ndvi)
  .map(dataset_nirv)

//load par data
var par_collection = ee.ImageCollection('MODIS/061/MCD18C2')
  .filterDate(startDate, endDate)
  //.filterBounds(geometry)


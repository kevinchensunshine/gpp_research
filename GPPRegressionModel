/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-121.66754243326335, 36.887392050775176],
          [-121.66680214344697, 36.88801846879452],
          [-121.66823712369629, 36.88930775401036],
          [-121.66900423721309, 36.888786467379845]]]),
    geometry2 = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-121.79316550308896, 36.84709205039706],
          [-121.79319768959714, 36.84238698016512],
          [-121.78937822395993, 36.844610762943375],
          [-121.78920656258298, 36.849556086622584]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Define the rectangular hyperbola model
Map.setCenter(-121.79103381747437,36.84689684630422, 17)
var a = 0.7478;
var b = 105.2422;

//run the model over an imagecollection input, which should have an NDVI band
var applyHyperbola = function(image) {
    // Define a helper function to apply the hyperbolic formula to a band
    var applyHyperbolicFormula = function(bandName) {
        var band = image.select(bandName);
        return band.expression(
            '((a * x) / (b + x))', {
                'x': band,
                'a': a,
                'b': b
            }).rename(bandName + '_Hyperbola_GPP');
    };

    // Apply the formula to each NIRVP band
    var hyperbolaBands = [
        applyHyperbolicFormula('NIRVP0000'),
        applyHyperbolicFormula('NIRVP0300'),
        applyHyperbolicFormula('NIRVP0600'),
        applyHyperbolicFormula('NIRVP0900'),
        applyHyperbolicFormula('NIRVP1200'),
        applyHyperbolicFormula('NIRVP1500'),
        applyHyperbolicFormula('NIRVP1800'),
        applyHyperbolicFormula('NIRVP2100')
    ];

    return image.addBands(hyperbolaBands, null, true);
};

function applyScaleFactors(image) {
  var opticalBands = image.select('B.').multiply(0.0001);
  return image.addBands(opticalBands, null, true)
}

var bitwiseExtract = function(input, fromBit, toBit) {
  if (toBit === undefined) toBit = fromBit
  var maskSize = ee.Number(1).add(toBit).subtract(fromBit)
  var mask = ee.Number(1).leftShift(maskSize).subtract(1)
  return input.rightShift(fromBit).bitwiseAnd(mask)
}

function maskAerosols(image) {
  var qa_aerosol = image.select(['SR_QA_AEROSOL']);
  var aerosol_bit = bitwiseExtract(qa_aerosol, 6, 7)

  var mask = qa_aerosol.bitwiseAnd(aerosol_bit).eq(0)
  return image.updateMask(mask).copyProperties(image).set('system:time_start', image.get('system:time_start'));
}

function maskClouds(image) {
  var qa = image.select('Fmask');
  var cirrus = image.select('B9')

  // Bit 1 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 1;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0);
  return image.updateMask(mask).copyProperties(image).set('system:time_start', image.get('system:time_start'));
}

function dataset_ndvi(image) {
  var ndvi = image.normalizedDifference(['B5', 'B4']).rename('NDVI');
  return image.addBands(ndvi);
}

function dataset_nirv(image) {
  var nirv = image.select('NDVI').multiply(image.select('B5')).rename('NIRV');
  return image.addBands(nirv);
}

//load nirv data
var startDate = '2016-01-1';
var endDate = '2016-12-30';
var nirv_collection = ee.ImageCollection('NASA/HLS/HLSL30/v002')
  .filterDate(startDate, endDate)
  .filterBounds(geometry2)
  .map(maskClouds)
  .map(dataset_ndvi)
  .map(dataset_nirv)
  .select(['NIRV'])
//First apply an SG Smoother to clean data
//---------------------------------------------------------------------------------------

var bandNames = ee.Image(nirv_collection.first()).bandNames();
var numBands = bandNames.size();
var initBands = ee.List.repeat(ee.Image(), numBands);
var initImage = ee.ImageCollection(initBands).toBands().rename(bandNames)

var n = 3;
var firstImage = ee.Image(nirv_collection.sort('system:time_start').first())
var lastImage = ee.Image(nirv_collection.sort('system:time_start', false).first())
var timeStart = ee.Date(firstImage.get('system:time_start'))
var timeEnd = ee.Date(lastImage.get('system:time_start'))

var totalDays = timeEnd.difference(timeStart, 'day');
var daysToInterpolate = ee.List.sequence(0, totalDays, n)

//BUGGY FIX SO THAT IT COPIES THE GEOMETRY AS WELL
var initImages = daysToInterpolate.map(function(day) {
  var image = initImage.set({
    'system:index': ee.Number(day).format('%d'),
    'system:time_start': timeStart.advance(day, 'day').millis(),
    // Set a property so we can identify interpolated images
    'smoothed': 'true'
  })
  return image.clip(geometry2)
})

var initCol = ee.ImageCollection.fromImages(initImages)

// Merge original and empty collections
var nirv_collection = nirv_collection.merge(initCol)

// Interpolation

// Add a band containing timestamp to each image
// This will be used to do pixel-wise interpolation later
var nirv_collection = nirv_collection.map(function(image) {
  var timeImage = image.metadata('system:time_start').rename('timestamp')
  // The time image doesn't have a mask. 
  // We set the mask of the time band to be the same as the first band of the image
  var timeImageMasked = timeImage.updateMask(image.mask().select(0))
  return image.addBands(timeImageMasked).toFloat();
})

// For each image in the collection, we need to find all images
// before and after the specified time-window

// This is accomplished using Joins
// We need to do 2 joins
// Join 1: Join the collection with itself to find all images before each image
// Join 2: Join the collection with itself to find all images after each image

// We first define the filters needed for the join

// Define a maxDifference filter to find all images within the specified days
// The filter needs the time difference in milliseconds
// Convert days to milliseconds

// Specify the time-window to look for unmasked pixel
var days = 45;
var millis = ee.Number(days).multiply(1000*60*60*24)

var maxDiffFilter = ee.Filter.maxDifference({
  difference: millis,
  leftField: 'system:time_start',
  rightField: 'system:time_start'
})

// We need a lessThanOrEquals filter to find all images after a given image
// This will compare the given image's timestamp against other images' timestamps
var lessEqFilter = ee.Filter.lessThanOrEquals({
  leftField: 'system:time_start',
  rightField: 'system:time_start'
})

// We need a greaterThanOrEquals filter to find all images before a given image
// This will compare the given image's timestamp against other images' timestamps
var greaterEqFilter = ee.Filter.greaterThanOrEquals({
  leftField: 'system:time_start',
  rightField: 'system:time_start'
})


// Apply the joins

// For the first join, we need to match all images that are after the given image.
// To do this we need to match 2 conditions
// 1. The resulting images must be within the specified time-window of target image
// 2. The target image's timestamp must be lesser than the timestamp of resulting images
// Combine two filters to match both these conditions
var filter1 = ee.Filter.and(maxDiffFilter, lessEqFilter)
// This join will find all images after, sorted in descending order
// This will gives us images so that closest is last
var join1 = ee.Join.saveAll({
  matchesKey: 'after',
  ordering: 'system:time_start',
  ascending: false})
  
var join1Result = join1.apply({
  primary: nirv_collection,
  secondary: nirv_collection,
  condition: filter1
})
// Each image now as a property called 'after' containing
// all images that come after it within the time-window

// Do the second join now to match all images within the time-window
// that come before each image
var filter2 = ee.Filter.and(maxDiffFilter, greaterEqFilter)
// This join will find all images before, sorted in ascending order
// This will gives us images so that closest is last
var join2 = ee.Join.saveAll({
  matchesKey: 'before',
  ordering: 'system:time_start',
  ascending: true})
  
var join2Result = join2.apply({
  primary: join1Result,
  secondary: join1Result,
  condition: filter2
})

// Each image now as a property called 'before' containing
// all images that come after it within the time-window
var joinedCol = join2Result;

// Do the interpolation

// We now write a function that will be used to interpolate all images
// This function takes an image and replaces the masked pixels
// with the interpolated value from before and after images.

var interpolateImages = function(image) {
  var image = ee.Image(image);
  // We get the list of before and after images from the image property
  // Mosaic the images so we a before and after image with the closest unmasked pixel
  var beforeImages = ee.List(image.get('before'))
  var beforeMosaic = ee.ImageCollection.fromImages(beforeImages).mosaic()
  var afterImages = ee.List(image.get('after'))
  var afterMosaic = ee.ImageCollection.fromImages(afterImages).mosaic()

  // Interpolation formula
  // y = y1 + (y2-y1)*((t – t1) / (t2 – t1))
  // y = interpolated image
  // y1 = before image
  // y2 = after image
  // t = interpolation timestamp
  // t1 = before image timestamp
  // t2 = after image timestamp
  
  // We first compute the ratio (t – t1) / (t2 – t1)

  // Get image with before and after times
  var t1 = beforeMosaic.select('timestamp').rename('t1')
  var t2 = afterMosaic.select('timestamp').rename('t2')

  var t = image.metadata('system:time_start').rename('t')

  var timeImage = ee.Image.cat([t1, t2, t])

  var timeRatio = timeImage.expression('(t - t1) / (t2 - t1)', {
    't': timeImage.select('t'),
    't1': timeImage.select('t1'),
    't2': timeImage.select('t2'),
  })
  // You can replace timeRatio with a constant value 0.5
  // if you wanted a simple average
  
  // Compute an image with the interpolated image y
  var interpolated = beforeMosaic
    .add((afterMosaic.subtract(beforeMosaic).multiply(timeRatio)))
  // Replace the masked pixels in the current image with the average value
  var result = image.unmask(interpolated)
  return result.copyProperties(image, ['system:time_start'])

}

var interpolatedCol = ee.ImageCollection(joinedCol.map(interpolateImages)).filter(ee.Filter.eq('smoothed', 'true'))
var distanceFunction = function(infromedImage, estimationImage) {
  return ee.Image.constant(
      ee.Number(infromedImage.get('system:time_start'))
      .subtract(
        ee.Number(estimationImage.get('system:time_start')))
        );
  }

// Apply smoothing

var oeel=require('users/OEEL/lib:loadAll');

var order = 3;

var sgFilteredCol = oeel.ImageCollection.SavatskyGolayFilter(
  interpolatedCol, 
  maxDiffFilter,
  distanceFunction,
  order)
print(sgFilteredCol.geometry())

var chart = ui.Chart.image.series({
  imageCollection: sgFilteredCol.select(['NIRV', 'd_0_NIRV'], ['NIRV', 'NIRV_sg']),
  region: geometry2,
  reducer: ee.Reducer.mean(),
  scale: 30
}).setOptions({
      lineWidth: 1,
      title: 'NDVI Time Series',
      interpolateNulls: false,
      vAxis: {title: 'NDVI', viewWindow: {min: 0, max: 1}},
      hAxis: {title: '', format: 'YYYY-MM'},
      lineWidth: 1,
      pointSize: 4,
      series: {
        0: {color: '#66c2a4', lineDashStyle: [1, 1], pointSize: 2}, // Original NDVI
        1: {color: '#238b45', lineWidth: 2 }, // Smoothed NDVI
      },

    })
print(chart)
//---------------------------------------------------------------------------------------

//load par data
var loc_start = '2016-09-01'
var par_collection = ee.ImageCollection('MODIS/061/MCD18C2')
  .filterDate(loc_start, ee.Date(loc_start).advance(1, 'day'))
  .filterBounds(geometry2)

function match_nirv_to_par(par_collection, nirv_collection) {
  //for each image in the par_collection, we want to interpolate a corresponding nirv image
  var bandNames = ee.Image(nirv_collection.first()).bandNames();
  var numBands = bandNames.size();
  var initBands = ee.List.repeat(ee.Image(), numBands);
  var initImage = ee.ImageCollection(initBands).toBands().rename(bandNames)
  
  var firstImage = ee.Image(nirv_collection.sort('system:time_start').first())
  var timeStart = ee.Date(firstImage.get('system:time_start'))
  
  var daysToInterpolate = ee.List(par_collection
    .aggregate_array("system:time_start")).distinct()

  var initImages = daysToInterpolate.map(function(millis) {
    var image = initImage.set({
      'system:index': ee.Number(millis).format('%d'),
      'system:time_start': millis,
      // Set a property so we can identify interpolated images
      'type': 'interpolated'
    })
    return image.clip(geometry2)
  })
  
  var initCol = ee.ImageCollection.fromImages(initImages)
  
  // Merge original and empty collections
  var nirv_collection = nirv_collection.merge(initCol)
  
  // Interpolation
  
  // Add a band containing timestamp to each image
  // This will be used to do pixel-wise interpolation later
  var originalCollection = nirv_collection.map(function(image) {
    var timeImage = image.metadata('system:time_start').rename('timestamp')
    // The time image doesn't have a mask. 
    // We set the mask of the time band to be the same as the first band of the image
    var timeImageMasked = timeImage.updateMask(image.mask().select(0))
    return image.addBands(timeImageMasked).toFloat();
  })
  
  // For each image in the collection, we need to find all images
  // before and after the specified time-window
  
  // This is accomplished using Joins
  // We need to do 2 joins
  // Join 1: Join the collection with itself to find all images before each image
  // Join 2: Join the collection with itself to find all images after each image
  
  // We first define the filters needed for the join
  
  // Define a maxDifference filter to find all images within the specified days
  // The filter needs the time difference in milliseconds
  // Convert days to milliseconds
  
  // Specify the time-window to look for unmasked pixel
  var days = 45;
  var millis = ee.Number(days).multiply(1000*60*60*24)
  
  var maxDiffFilter = ee.Filter.maxDifference({
    difference: millis,
    leftField: 'system:time_start',
    rightField: 'system:time_start'
  })
  
  // We need a lessThanOrEquals filter to find all images after a given image
  // This will compare the given image's timestamp against other images' timestamps
  var lessEqFilter = ee.Filter.lessThanOrEquals({
    leftField: 'system:time_start',
    rightField: 'system:time_start'
  })
  
  // We need a greaterThanOrEquals filter to find all images before a given image
  // This will compare the given image's timestamp against other images' timestamps
  var greaterEqFilter = ee.Filter.greaterThanOrEquals({
    leftField: 'system:time_start',
    rightField: 'system:time_start'
  })
  
  
  // Apply the joins
  
  // For the first join, we need to match all images that are after the given image.
  // To do this we need to match 2 conditions
  // 1. The resulting images must be within the specified time-window of target image
  // 2. The target image's timestamp must be lesser than the timestamp of resulting images
  // Combine two filters to match both these conditions
  var filter1 = ee.Filter.and(maxDiffFilter, lessEqFilter)
  // This join will find all images after, sorted in descending order
  // This will gives us images so that closest is last
  var join1 = ee.Join.saveAll({
    matchesKey: 'after',
    ordering: 'system:time_start',
    ascending: false})
    
  var join1Result = join1.apply({
    primary: originalCollection,
    secondary: originalCollection,
    condition: filter1
  })
  // Each image now as a property called 'after' containing
  // all images that come after it within the time-window
  
  // Do the second join now to match all images within the time-window
  // that come before each image
  var filter2 = ee.Filter.and(maxDiffFilter, greaterEqFilter)
  // This join will find all images before, sorted in ascending order
  // This will gives us images so that closest is last
  var join2 = ee.Join.saveAll({
    matchesKey: 'before',
    ordering: 'system:time_start',
    ascending: true})
    
  var join2Result = join2.apply({
    primary: join1Result,
    secondary: join1Result,
    condition: filter2
  })
  
  // Each image now as a property called 'before' containing
  // all images that come after it within the time-window
  var joinedCol = join2Result;
  
  // Do the interpolation
  
  // We now write a function that will be used to interpolate all images
  // This function takes an image and replaces the masked pixels
  // with the interpolated value from before and after images.
  
  var interpolateImages = function(image) {
    var image = ee.Image(image);
    // We get the list of before and after images from the image property
    // Mosaic the images so we a before and after image with the closest unmasked pixel
    var beforeImages = ee.List(image.get('before'))
    var beforeMosaic = ee.ImageCollection.fromImages(beforeImages).mosaic()
    var afterImages = ee.List(image.get('after'))
    var afterMosaic = ee.ImageCollection.fromImages(afterImages).mosaic()
  
    // Interpolation formula
    // y = y1 + (y2-y1)*((t – t1) / (t2 – t1))
    // y = interpolated image
    // y1 = before image
    // y2 = after image
    // t = interpolation timestamp
    // t1 = before image timestamp
    // t2 = after image timestamp
    
    // We first compute the ratio (t – t1) / (t2 – t1)
  
    // Get image with before and after times
    var t1 = beforeMosaic.select('timestamp').rename('t1')
    var t2 = afterMosaic.select('timestamp').rename('t2')
  
    var t = image.metadata('system:time_start').rename('t')
  
    var timeImage = ee.Image.cat([t1, t2, t])
  
    var timeRatio = timeImage.expression('(t - t1) / (t2 - t1)', {
      't': timeImage.select('t'),
      't1': timeImage.select('t1'),
      't2': timeImage.select('t2'),
    })
    // You can replace timeRatio with a constant value 0.5
    // if you wanted a simple average
    
    // Compute an image with the interpolated image y
    var interpolated = beforeMosaic
      .add((afterMosaic.subtract(beforeMosaic).multiply(timeRatio)))
    // Replace the masked pixels in the current image with the average value
    var result = image.unmask(interpolated)
    return result.copyProperties(image, ['system:time_start'])
  }

  var interpolatedCol = ee.ImageCollection(joinedCol.map(interpolateImages)).filter(ee.Filter.eq('type', 'interpolated'))

  return interpolatedCol
}

var matching = match_nirv_to_par(par_collection, sgFilteredCol.select(['d_0_NIRV']))

var nirvp_collection = matching.map(function(nirv_image) {
  var date = nirv_image.get('system:time_start');
  var par_image = par_collection.filter(ee.Filter.equals('system:time_start', date)).first();
  return nirv_image.addBands(par_image);
});

var multiplyBands = function(image) {
  var nirvBand = image.select('d_0_NIRV');
  var par0000Band = image.select('GMT_0000_PAR');
  var par0300Band = image.select('GMT_0300_PAR');
  var par0600Band = image.select('GMT_0600_PAR');
  var par0900Band = image.select('GMT_0900_PAR');
  var par1200Band = image.select('GMT_1200_PAR');
  var par1500Band = image.select('GMT_1500_PAR');
  var par1800Band = image.select('GMT_1800_PAR');
  var par2100Band = image.select('GMT_2100_PAR');
  return image.addBands([nirvBand.multiply(par0000Band).rename('NIRVP0000'), 
                        nirvBand.multiply(par0300Band).rename('NIRVP0300'),
                        nirvBand.multiply(par0600Band).rename('NIRVP0600'),
                        nirvBand.multiply(par0900Band).rename('NIRVP0900'),
                        nirvBand.multiply(par1200Band).rename('NIRVP1200'),
                        nirvBand.multiply(par1500Band).rename('NIRVP1500'),
                        nirvBand.multiply(par1800Band).rename('NIRVP1800'),
                        nirvBand.multiply(par2100Band).rename('NIRVP2100')]);
};

nirvp_collection = nirvp_collection.map(multiplyBands);

var gpp_regressed = nirvp_collection.map(applyHyperbola)

var gpp_image = gpp_regressed.first()

//apply min_max normalization to visualize result:
var bands = ['NIRVP0000_Hyperbola_GPP',
              'NIRVP0300_Hyperbola_GPP',
              'NIRVP0600_Hyperbola_GPP',
              'NIRVP0900_Hyperbola_GPP',
              'NIRVP1200_Hyperbola_GPP',
              'NIRVP1500_Hyperbola_GPP',
              'NIRVP1800_Hyperbola_GPP',
              'NIRVP2100_Hyperbola_GPP']
/*
function getTimeFromBandName(bandName) {
  var timeString = bandName.match(/\d+/)[0];
  var time = ee.Number.parse(timeString);
  return time.multiply(3600000);
}

// Split bands into separate images
var imageList = bands.map(function(bandName) {
  var time = getTimeFromBandName(bandName);
  var singleBandImage = gpp_image.select([bandName]).rename('Prediced_GPP');
  return singleBandImage.set('system:time_start', time).clip(geometry2);
});

// Convert the list of images into an image collection
var imageCollection = ee.ImageCollection(imageList);

print(imageCollection.first())

var visParams = {
  bands: ['Prediced_GPP'], // Specify the band to visualize
  min: 0,
  max: 4000,
  palette: ['blue', 'green', 'red']
};

// Generate a URL for an animated GIF
var url = imageCollection.getVideoThumbURL(visParams);
print(url);
*/
          
var singleBand = gpp_image.select(bands).toArray();

var minMax = gpp_image.select(bands[7]).reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: geometry2, // Or specify your region of interest
  scale: 30, // Adjust according to your image's resolution
  maxPixels: 1e9
});


var min = ee.Image.constant(minMax.get(bands[7] + '_min'));
var max = ee.Image.constant(minMax.get(bands[7] + '_max'));
print(minMax.get(bands[7] + '_max'))
var normalizedImage = gpp_image.select(bands[7])
                                //.subtract(min)
                                //.divide(max.subtract(min))
                                .rename('Normalized_Hyperbola_GPP');

Map.addLayer(gpp_image, {bands: [bands[7]], min: 0, max: 1}, 'Normalized Hyperbola_GPP');
/*
var exportParams = {
  description: 'Normalized_Hyperbola_GPP_PNG',
  image: normalizedImage.select(['Normalized_Hyperbola_GPP']),
  scale: 30, // Adjust this to the resolution you want
  region: normalizedImage.geometry(), // Define the region or use the image's geometry
  maxPixels: 1e9,
  fileFormat: 'PNG'
};

for (var i = 0; i < 8; i++) {
  var exportParams = {
    description: bands[i],
    image: gpp_image.select(bands[i]),
    scale: 30, // Adjust this to the resolution you want
    region: geometry2, // Define the region or use the image's geometry
    maxPixels: 1e9,
    fileFormat: 'GeoTiff',
    folder: 'Kevin_Chen/Dataset/demo_images'
  };

  Export.image.toDrive(exportParams);
  print('Export initiated for Normalized_Hyperbola_GPP as PNG');
}

*/


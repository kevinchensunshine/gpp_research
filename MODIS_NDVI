/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var modis = ee.ImageCollection("MODIS/061/MOD09Q1"),
    pt = /* color: #98ff00 */ee.Geometry.Polygon(
        [[[-121.789167, 36.846645],
          [-121.789167, 36.849645],
          [-121.793267, 36.846945],
          [-121.792567, 36.844345]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/




Map.setCenter(-121.789167, 36.846645, 15)

Map.addLayer(pt,
             {'color': 'green'},
             'Geometry [black]: geometry');

// real NDVI values 
var NDVI = function(image) {
  return image.expression('float(b("NDVI")/10000)')
};

//Rescale
var rescale = function(image) {
  
  var scaled = image.select(['sur_refl_b01', 'sur_refl_b02']).divide(10000).copyProperties(image, ["system:time_start", "system:time_end"])
  return image.addBands(scaled, null, true)

}

var updatedFeatures = function(feature) {
  var ndviValue = feature.get('sur_refl_b02');
  return feature.addBands(ndviValue).copyProperties(feature);
};

function dataset_ndvi(image) {
  var ndvi = image.normalizedDifference(['sur_refl_b02', 'sur_refl_b01']).rename('NDVI');
  return image.addBands(ndvi);
}

var bitwiseExtract = function(input, fromBit, toBit) {
  if (toBit === undefined) toBit = fromBit
  var maskSize = ee.Number(1).add(toBit).subtract(fromBit)
  var mask = ee.Number(1).leftShift(maskSize).subtract(1)
  return input.rightShift(fromBit).bitwiseAnd(mask)
}

var mask_clouds = function(image) {
  var qa = image.select('State');
  var modis_cloud = 1 << 10
  var mask = qa.bitwiseAnd(modis_cloud).eq(0)
      return image.updateMask(mask).copyProperties(image).set('system:time_start', ee.Date(image.get('system:time_start'))/*.advance(-8, 'days')*/.millis()).set('system:time_end', ee.Date(image.get('system:time_end'))./*advance(-8, 'days').*/millis());
};

//Buffered space to ensure all dates in the GPP set are captured
var start_date = '2016-05-10';
var end_date = '2016-10-31';


var originalCollection = modis
.filterDate(start_date, end_date)
.filterBounds(pt)
.map(rescale)
.map(mask_clouds)
.map(dataset_ndvi)

//Currently using mean. Not sure if this is the best metric for this or median, but results are similar
print(Chart.image.series(originalCollection.select('sur_refl_b02'), pt, ee.Reducer.median(), 2000)//.select('NDVI')
    //.setSeriesNames(['fitted'])
    .setOptions({
      title: 'NIR_timeseries',
      lineWidth: 1,
      pointSize: 3,
}));

print(Chart.image.series(originalCollection.select('NDVI'), pt, ee.Reducer.median(), 2000)//.select('NDVI')
    //.setSeriesNames(['fitted'])
    .setOptions({
      title: 'NDVI_timeseries',
      lineWidth: 1,
      pointSize: 3,
}));


//Linear Interpolation
var bandNames = ee.Image(originalCollection.first()).bandNames();
var numBands = bandNames.size();
var initBands = ee.List.repeat(ee.Image(), numBands);
var initImage = ee.ImageCollection(initBands).toBands().rename(bandNames)

var n = 5;
var firstImage = ee.Image(originalCollection.sort('system:time_start').first())
var lastImage = ee.Image(originalCollection.sort('system:time_start', false).first())
var timeStart = ee.Date(firstImage.get('system:time_start'))
var timeEnd = ee.Date(lastImage.get('system:time_start'))

var totalDays = timeEnd.difference(timeStart, 'day');
var daysToInterpolate = ee.List.sequence(0, totalDays, n)

var initImages = daysToInterpolate.map(function(day) {
  var image = initImage.set({
    'system:index': ee.Number(day).format('%d'),
    'system:time_start': timeStart.advance(day, 'day').millis(),
    // Set a property so we can identify interpolated images
    'type': 'interpolated'
  })
  return image
})

var initCol = ee.ImageCollection.fromImages(initImages)

// Merge original and empty collections
var originalCollection = originalCollection.merge(initCol)

// Interpolation

// Add a band containing timestamp to each image
// This will be used to do pixel-wise interpolation later
var originalCollection = originalCollection.map(function(image) {
  var timeImage = image.metadata('system:time_start').rename('timestamp')
  // The time image doesn't have a mask. 
  // We set the mask of the time band to be the same as the first band of the image
  var timeImageMasked = timeImage.updateMask(image.mask().select(0))
  return image.addBands(timeImageMasked).toFloat();
})

// For each image in the collection, we need to find all images
// before and after the specified time-window

// This is accomplished using Joins
// We need to do 2 joins
// Join 1: Join the collection with itself to find all images before each image
// Join 2: Join the collection with itself to find all images after each image

// We first define the filters needed for the join

// Define a maxDifference filter to find all images within the specified days
// The filter needs the time difference in milliseconds
// Convert days to milliseconds

// Specify the time-window to look for unmasked pixel
var days = 45;
var millis = ee.Number(days).multiply(1000*60*60*24)

var maxDiffFilter = ee.Filter.maxDifference({
  difference: millis,
  leftField: 'system:time_start',
  rightField: 'system:time_start'
})

// We need a lessThanOrEquals filter to find all images after a given image
// This will compare the given image's timestamp against other images' timestamps
var lessEqFilter = ee.Filter.lessThanOrEquals({
  leftField: 'system:time_start',
  rightField: 'system:time_start'
})

// We need a greaterThanOrEquals filter to find all images before a given image
// This will compare the given image's timestamp against other images' timestamps
var greaterEqFilter = ee.Filter.greaterThanOrEquals({
  leftField: 'system:time_start',
  rightField: 'system:time_start'
})


// Apply the joins

// For the first join, we need to match all images that are after the given image.
// To do this we need to match 2 conditions
// 1. The resulting images must be within the specified time-window of target image
// 2. The target image's timestamp must be lesser than the timestamp of resulting images
// Combine two filters to match both these conditions
var filter1 = ee.Filter.and(maxDiffFilter, lessEqFilter)
// This join will find all images after, sorted in descending order
// This will gives us images so that closest is last
var join1 = ee.Join.saveAll({
  matchesKey: 'after',
  ordering: 'system:time_start',
  ascending: false})
  
var join1Result = join1.apply({
  primary: originalCollection,
  secondary: originalCollection,
  condition: filter1
})
// Each image now as a property called 'after' containing
// all images that come after it within the time-window

// Do the second join now to match all images within the time-window
// that come before each image
var filter2 = ee.Filter.and(maxDiffFilter, greaterEqFilter)
// This join will find all images before, sorted in ascending order
// This will gives us images so that closest is last
var join2 = ee.Join.saveAll({
  matchesKey: 'before',
  ordering: 'system:time_start',
  ascending: true})
  
var join2Result = join2.apply({
  primary: join1Result,
  secondary: join1Result,
  condition: filter2
})

// Each image now as a property called 'before' containing
// all images that come after it within the time-window
var joinedCol = join2Result;

// Do the interpolation

// We now write a function that will be used to interpolate all images
// This function takes an image and replaces the masked pixels
// with the interpolated value from before and after images.

var interpolateImages = function(image) {
  var image = ee.Image(image);
  // We get the list of before and after images from the image property
  // Mosaic the images so we a before and after image with the closest unmasked pixel
  var beforeImages = ee.List(image.get('before'))
  var beforeMosaic = ee.ImageCollection.fromImages(beforeImages).mosaic()
  var afterImages = ee.List(image.get('after'))
  var afterMosaic = ee.ImageCollection.fromImages(afterImages).mosaic()

  // Interpolation formula
  // y = y1 + (y2-y1)*((t – t1) / (t2 – t1))
  // y = interpolated image
  // y1 = before image
  // y2 = after image
  // t = interpolation timestamp
  // t1 = before image timestamp
  // t2 = after image timestamp
  
  // We first compute the ratio (t – t1) / (t2 – t1)

  // Get image with before and after times
  var t1 = beforeMosaic.select('timestamp').rename('t1')
  var t2 = afterMosaic.select('timestamp').rename('t2')

  var t = image.metadata('system:time_start').rename('t')

  var timeImage = ee.Image.cat([t1, t2, t])

  var timeRatio = timeImage.expression('(t - t1) / (t2 - t1)', {
    't': timeImage.select('t'),
    't1': timeImage.select('t1'),
    't2': timeImage.select('t2'),
  })
  // You can replace timeRatio with a constant value 0.5
  // if you wanted a simple average
  
  // Compute an image with the interpolated image y
  var interpolated = beforeMosaic
    .add((afterMosaic.subtract(beforeMosaic).multiply(timeRatio)))
  // Replace the masked pixels in the current image with the average value
  var result = image.unmask(interpolated)
  return result.copyProperties(image, ['system:time_start'])
}

var interpolatedCol = ee.ImageCollection(joinedCol.map(interpolateImages))

var regularCol = interpolatedCol.filter(ee.Filter.eq('type', 'interpolated'))


var Mod_col = regularCol


// Add predictors for SG fitting, using date difference
// We prepare for order 3 fitting, but can be adapted to lower order fitting later on
var modis_res = Mod_col.filterDate(start_date, end_date).filterBounds(pt).map(function(img) {
  var dstamp = ee.Date(img.get('system:time_start'))
  var ddiff = dstamp.difference(ee.Date(start_date), 'hour')
  img = img.select(['NDVI', 'sur_refl_b02']).set('date', dstamp)
  return img.addBands(ee.Image(1).toFloat().rename('constant')).
    addBands(ee.Image(ddiff).toFloat().rename('t')).
    addBands(ee.Image(ddiff).pow(ee.Image(2)).toFloat().rename('t2')).
    addBands(ee.Image(ddiff).pow(ee.Image(3)).toFloat().rename('t3'))
})

print(modis_res, 'modis_res')


// Step 2: Set up Savitzky-Golay smoothing
var window_size = 9
var half_window = (window_size - 1)/2

var imageAxis = 0;
var bandAxis = 1;

var order = 3
var coeffFlattener = [['constant', 'x', 'x2', 't3']]
var indepSelectors = ['constant', 't', 't2', 't3']

var array = modis_res.toArray();
print(array, 'array')

// Solve 
function getLocalFit(i) {
  // Get a slice corresponding to the window_size of the SG smoother
  var subarray = array.arraySlice(imageAxis, ee.Number(i).int(), ee.Number(i).add(window_size).int())
  var predictors = subarray.arraySlice(bandAxis, 2, 2 + order + 1)
  var response = subarray.arraySlice(bandAxis, 0, 1); // NDVI
  var coeff = predictors.matrixSolve(response)

  coeff = coeff.arrayProject([0]).arrayFlatten(coeffFlattener)
  return coeff  
}


// For the remainder, use modis_res as a list of images
modis_res = modis_res.toList(modis_res.size())
print(modis_res,'modis_res size')


var runLength = ee.List.sequence(0, modis_res.size().subtract(window_size))
print(runLength, 'runLength')

// Run the SG filter over the series, and get the smoothed image 
var ndvi_sg_series = runLength.map(function(i) {
  var ref = ee.Image(modis_res.get(ee.Number(i).add(half_window)))
  return getLocalFit(i).multiply(ref.select(indepSelectors)).reduce(ee.Reducer.sum()).copyProperties(ref,['date','system:time_start'])
})

print(Chart.image.series(ndvi_sg_series, pt, ee.Reducer.median(), 2000)//.select('NDVI')
    //.setSeriesNames(['fitted'])
    .setOptions({
      title: 'NDVI_SG_timeseries_3rd Order',
      lineWidth: 1,
      pointSize: 3,
}));

ndvi_sg_series = ee.ImageCollection(ndvi_sg_series)
/*

var featureCollection = ndvi_sg_series.map(function(image) {
    var date = ee.Date(image.get('system:time_start')).format('yyyy-MM-dd HH:mm:ss');
    var medianNDVI = image.get('sum');
    return ee.Feature(null, {
      'Date': date,
      'NDVI': medianNDVI
    });
  });
  
Export.table.toDrive({
  collection: featureCollection,
  description: 'NDVI_MODIS250',
  fileFormat: 'CSV'
});
*/

// Add predictors for SG fitting, using date difference
// We prepare for order 3 fitting, but can be adapted to lower order fitting later on
var modis_res_nir = Mod_col.filterDate(start_date, end_date).filterBounds(pt).map(function(img) {
  var dstamp = ee.Date(img.get('system:time_start'))
  var ddiff = dstamp.difference(ee.Date(start_date), 'hour')
  img = img.select(['sur_refl_b02', 'NDVI']).set('date', dstamp)
  return img.addBands(ee.Image(1).toFloat().rename('constant')).
    addBands(ee.Image(ddiff).toFloat().rename('t')).
    addBands(ee.Image(ddiff).pow(ee.Image(2)).toFloat().rename('t2')).
    addBands(ee.Image(ddiff).pow(ee.Image(3)).toFloat().rename('t3'))
})

print(modis_res_nir, 'modis_res')


// Step 2: Set up Savitzky-Golay smoothing
var window_size = 9
var half_window = (window_size - 1)/2

var imageAxis = 0;
var bandAxis = 1;

var order = 3
var coeffFlattener = [['constant', 'x', 'x2', 'x3']]
var indepSelectors = ['constant', 't', 't2', 't3']

var array = modis_res_nir.toArray();

// For the remainder, use modis_res as a list of images
modis_res = modis_res_nir.toList(modis_res_nir.size())
print(modis_res,'modis_res size')


var runLength = ee.List.sequence(0, modis_res_nir.size().subtract(window_size))
print(runLength, 'runLength')

// Run the SG filter over the series, and get the smoothed image 
var nir_sg_series = runLength.map(function(i) {
  var ref = ee.Image(modis_res.get(ee.Number(i).add(half_window)))
  return getLocalFit(i).multiply(ref.select(indepSelectors)).reduce(ee.Reducer.sum()).copyProperties(ref,['date','system:time_start'])
})

print(nir_sg_series, 'sg_series')

print(Chart.image.series(nir_sg_series, pt, ee.Reducer.median(), 2000)//.select('NDVI')
    //.setSeriesNames(['fitted'])
    .setOptions({
      title: 'NIR_SG_timeseries_3rd Order',
      lineWidth: 1,
      pointSize: 3,
}));

nir_sg_series = ee.ImageCollection(nir_sg_series)
/*


var featureCollection = nir_sg_series.map(function(image) {
    var date = ee.Date(image.get('system:time_start')).format('yyyy-MM-dd HH:mm:ss');
    var medianNIR = image.get('sum');
    return ee.Feature(null, {
      'Date': date,
      'NIR': medianNIR
    });
  });
  
print(featureCollection)
  
Export.table.toDrive({
  collection: featureCollection,
  description: 'NIR_MODIS250',
  fileFormat: 'CSV'
});
*/
/*
Code to piecewise multiple NIRV and NDVI
*/

var index = 0
var nir_sg_list = nir_sg_series.toList(nir_sg_series.size())
function mul_img(ndvi_image) {
  var nir_img = nir_sg_list.get(index)
  index++
  return ndvi_image.multiply(nir_img).copyProperties(ndvi_image).set('system:time_start', ndvi_image.get('system:time_start'))
}

var nirv_sg_smoothed = ndvi_sg_series.map(mul_img)

print(Chart.image.series(nirv_sg_smoothed.select("sum"), pt, ee.Reducer.median(), 2000)//.select('NDVI')
    //.setSeriesNames(['fitted'])
    .setOptions({
      title: 'NIRV_SG_timeseries_3rd Order',
      lineWidth: 1,
      pointSize: 3,
}));



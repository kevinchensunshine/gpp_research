var batch = require('users/fitoprincipe/geetools:batch')

var ndviParams = {max: 1, min: -1, palette: ["blue", "white", "green"]}

function maskS2clouds(image) {
  var qa = image.select('QA60');

  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask).divide(10000).copyProperties(image, ["system:time_end"]).set('system:time_start', image.get('system:time_start'));
}


var startDate = '2021-08-01';
var endDate = '2022-08-01';

var centerPoint = ee.Geometry.Point([-121.7757874638141, 36.82780041527757])
var boundingBox = centerPoint.buffer(125);

function dataset_ndvi(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI');
  return image.addBands(ndvi);
}

var dataset = ee.ImageCollection('COPERNICUS/S2')  ///S2_SR
                  .filterDate(startDate, endDate)
                  .filterBounds(boundingBox)
                  // Pre-filter to get less cloudy granules.
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',80))
                  .map(maskS2clouds)
                  .map(dataset_ndvi)
                  .filter(ee.Filter.notNull(['system:time_start']))

var chart = ui.Chart.image.series({
    imageCollection: dataset.select('NDVI'),
    region: boundingBox
    }).setOptions({
      interpolateNulls: true,
      lineWidth: 1,
      pointSize: 3,
      title: 'NDVI over Time at Clicked Point',
      vAxis: {title: 'NDVI'},
      hAxis: {title: 'Date', format: 'YYYY-MMM', gridlines: {count: 12}}
    });
  print(chart)

var modis_res = dataset.filterDate(startDate, endDate).map(function(img) {
  var dstamp = ee.Date(img.get('system:time_start'))
  var ddiff = dstamp.difference(ee.Date(startDate), 'hour')
  img = img.select(['NDVI', 'B1']).set('date', dstamp)
  return img.addBands(ee.Image(1).toFloat().rename('constant')).
    addBands(ee.Image(ddiff).toFloat().rename('t')).
    addBands(ee.Image(ddiff).pow(ee.Image(2)).toFloat().rename('t2')).
    addBands(ee.Image(ddiff).pow(ee.Image(3)).toFloat().rename('t3'))
})

print(modis_res, 'modis_res')

// Step 2: Set up Savitzky-Golay smoothing
var window_size = 9
var half_window = (window_size - 1)/2

// Define the axes of variation in the collection array.
var imageAxis = 0;
var bandAxis = 1;

// Set polynomial order
var order = 3
var coeffFlattener = [['constant', 'x', 'x2', 'x3']]
var indepSelectors = ['constant', 't', 't2', 't3']

// // Change to order = 2 as follows:
// var order = 2
// var coeffFlattener = [['constant', 'x', 'x2']]
// var indepSelectors = ['constant', 't', 't2']

// Convert the collection to an array.
var array = modis_res.toArray();
print(array, 'array')

// Solve 
function getLocalFit(i) {
  // Get a slice corresponding to the window_size of the SG smoother
  var subarray = array.arraySlice(imageAxis, ee.Number(i).int(), ee.Number(i).add(window_size).int())
  var predictors = subarray.arraySlice(bandAxis, 2, 2 + order + 1)
  var response = subarray.arraySlice(bandAxis, 0, 1); // NDVI
  var coeff = predictors.matrixSolve(response)

  coeff = coeff.arrayProject([0]).arrayFlatten(coeffFlattener)
  return coeff  
}


// For the remainder, use modis_res as a list of images
modis_res = modis_res.toList(modis_res.size())
print(modis_res,'modis_res size')


var runLength = ee.List.sequence(0, modis_res.size().subtract(window_size))
print(runLength, 'runLength')

// Run the SG filter over the series, and get the smoothed image 
var sg_series = runLength.map(function(i) {
  var ref = ee.Image(modis_res.get(ee.Number(i).add(half_window)))
  return getLocalFit(i).multiply(ref.select(indepSelectors)).reduce(ee.Reducer.sum()).copyProperties(ref,['date','system:time_start'])
})

print(sg_series, 'sg_series')


print(Chart.image.series(sg_series, boundingBox, ee.Reducer.median(), 30)
    .setOptions({
      title: 'NDVI_SG_timeseries_3rd Order',
      interpolateNulls: true,
      lineWidth: 1,
      pointSize: 3,
}));


// batch.Download.ImageCollection.toDrive(fieldNDVI, 'GEE',
//                 {scale: 30, 
//                 region: cover_crop_fields.getInfo()["coordinates"], 
//                 type: 'float'})

// var imageList = dataset.select("NDVI").toList(1000);
// var len = imageList.length().getInfo();
// var fieldList = cover_crop_fields.toList(1000);
// var len_fields = fieldList.length().getInfo();
// for (var i = 0; i < 1; i++) {
//   var imagei = ee.Image(imageList.get(i));
//   var IDShort = imagei.id().getInfo();
//   print(IDShort);
//   for (var j = 0; j < len_fields; j++) {
//     var bbox = ee.Feature(fieldList.get(j));
//     var fieldId = bbox.id().getInfo();
    
//     Export.image.toDrive({
//       image: imagei.clip(bbox),  // <----- flatten()
//       description: 'Sentinel2_NDVI_' + IDShort + "_" + fieldId,
//       folder: "GEE",
//       fileFormat: 'tiff',
//       scale: 30,
//       maxPixels: 70000000000
//     });
//   }
// }

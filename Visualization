/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var cropland = ee.ImageCollection("USDA/NASS/CDL"),
    geometry = /* color: #d63000 */ee.Geometry.Point([-121.79103381747437, 36.84689684630422]),
    polygon = /* color: #98ff00 */ee.Geometry.Polygon(
        [[[-121.789167, 36.846645],
          [-121.78959615344239, 36.84699208275723],
          [-121.7916354020996, 36.84650410303716],
          [-121.79104047221375, 36.845434899198615]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/



var startDate = '2016-01-1';
var endDate = '2016-12-30';

var cur_scale = 30

var centerPoint = polygon
var boundingBox = centerPoint;


function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  return image.addBands(opticalBands, null, true)
}

var bitwiseExtract = function(input, fromBit, toBit) {
  if (toBit === undefined) toBit = fromBit
  var maskSize = ee.Number(1).add(toBit).subtract(fromBit)
  var mask = ee.Number(1).leftShift(maskSize).subtract(1)
  return input.rightShift(fromBit).bitwiseAnd(mask)
}

function maskAerosols(image) {
  var qa_aerosol = image.select(['SR_QA_AEROSOL']);
  var aerosol_bit = bitwiseExtract(qa_aerosol, 6, 7)

  var mask = qa_aerosol.bitwiseAnd(aerosol_bit).eq(0)
  return image.updateMask(mask).copyProperties(image).set('system:time_start', image.get('system:time_start'));
}

function maskClouds(image) {
  var QA60 = image.select(['QA_PIXEL']);
  
  var cirrusBit = 1 << 2;
  var cloudBit = 1 << 3;

  var mask = QA60.bitwiseAnd(cloudBit).eq(0)
  .and(QA60.bitwiseAnd(cirrusBit).eq(0))

  return image.updateMask(mask).copyProperties(image).set('system:time_start', image.get('system:time_start'));
}

function dataset_ndvi(image) {
  var ndvi = image.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');
  return image.addBands(ndvi);
}

function dataset_nirv(image) {
  var nirv = image.select('NDVI').multiply(image.select('SR_B5')).rename('NIRV');
  return image.addBands(nirv);
}


var originalCollection = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .filterDate(startDate, endDate)
  .filterBounds(boundingBox)
  .map(maskClouds)
  .map(applyScaleFactors)
  .map(dataset_ndvi)
  .map(dataset_nirv)

  
var temporalCollection = function(collection, start, count, interval, units) {
  // Create a sequence of numbers, one for each time interval.
  var sequence = ee.List.sequence(0, ee.Number(count).subtract(1));

  var originalStartDate = ee.Date(start);

  return ee.ImageCollection(sequence.map(function(i) {
    // Get the start date of the current sequence.
    var startDate = originalStartDate.advance(ee.Number(interval).multiply(i), units);

    // Get the end date of the current sequence.
    var endDate = originalStartDate.advance(
      ee.Number(interval).multiply(ee.Number(i).add(1)), units);

    return collection.filterDate(startDate, endDate).mean()
        .set('system:time_start', startDate.millis())
        .set('system:time_end', endDate.millis());
  }));
};


var rgbVis = {
  bands: ['SR_B4', 'SR_B3', 'SR_B2'],
  min: 0.0,
  max: 0.3
};

/*
Map Visualization Components
*/
Map.setCenter(-121.789167, 36.846645, 17)
Map.addLayer(originalCollection, rgbVis, 'Multi-band RGB image')

var dataset = ee.ImageCollection('USDA/NASS/CDL')
                  .filter(ee.Filter.date('2018-01-01', '2019-12-31'))
                  .first();
var cropLandcover = dataset.select('cropland');
Map.addLayer(cropLandcover, {}, 'Crop Landcover');

Map.addLayer(polygon,
             {'color': 'green'},
             'Geometry [black]: geometry');

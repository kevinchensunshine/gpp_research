/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var strawberry_fields_high_conf = ee.FeatureCollection("users/kevinlc3/strawberry_fields_geometry_highconf");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//https://google-earth-engine.com/Advanced-Topics/Scaling-up-in-Earth-Engine/

//init globals

var gpp_utils = require('users/kevinlc3/ndvi_nir_collection:GPP_Processing_Lib');

var bands = ['NIRVP0000',
            'NIRVP0300',
            'NIRVP0600',
            'NIRVP0900',
            'NIRVP1200',
            'NIRVP1500',
            'NIRVP1800',
            'NIRVP2100'];


function applyScaleFactors(image) {
  var opticalBands = image.select('B.').multiply(0.0001);
  return image.addBands(opticalBands, null, true);
}

var bitwiseExtract = function(input, fromBit, toBit) {
  if (toBit === undefined) toBit = fromBit;
  var maskSize = ee.Number(1).add(toBit).subtract(fromBit);
  var mask = ee.Number(1).leftShift(maskSize).subtract(1);
  return input.rightShift(fromBit).bitwiseAnd(mask);
};

function maskAerosols(image) {
  var qa_aerosol = image.select(['SR_QA_AEROSOL']);
  var aerosol_bit = bitwiseExtract(qa_aerosol, 6, 7);

  var mask = qa_aerosol.bitwiseAnd(aerosol_bit).eq(0);
  return image.updateMask(mask).copyProperties(image).set('system:time_start', image.get('system:time_start'));
}

function maskClouds(image) {
  var qa = image.select('Fmask');
  var cirrus = image.select('B9');

  // Bit 1 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 1;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0);
  return image.updateMask(mask).copyProperties(image).set('system:time_start', image.get('system:time_start'));
}

function dataset_ndvi(image) {
  var ndvi = image.normalizedDifference(['B5', 'B4']).rename('NDVI');
  return image.addBands(ndvi);
}

function dataset_nirv(image) {
  var nirv = image.select('NDVI').multiply(image.select('B5')).rename('NIRV');
  return image.addBands(nirv);
}

function multiplyBands(image) {
  var nirvBand = image.select('d_0_NIRV');
  var par0000Band = image.select('GMT_0000_PAR');
  var par0300Band = image.select('GMT_0300_PAR');
  var par0600Band = image.select('GMT_0600_PAR');
  var par0900Band = image.select('GMT_0900_PAR');
  var par1200Band = image.select('GMT_1200_PAR');
  var par1500Band = image.select('GMT_1500_PAR');
  var par1800Band = image.select('GMT_1800_PAR');
  var par2100Band = image.select('GMT_2100_PAR');
  return image.addBands([nirvBand.multiply(par0000Band).rename('NIRVP0000'), 
                        nirvBand.multiply(par0300Band).rename('NIRVP0300'),
                        nirvBand.multiply(par0600Band).rename('NIRVP0600'),
                        nirvBand.multiply(par0900Band).rename('NIRVP0900'),
                        nirvBand.multiply(par1200Band).rename('NIRVP1200'),
                        nirvBand.multiply(par1500Band).rename('NIRVP1500'),
                        nirvBand.multiply(par1800Band).rename('NIRVP1800'),
                        nirvBand.multiply(par2100Band).rename('NIRVP2100')]);
}

var startDate = '2016-01-1';
var endDate = '2016-12-30';
var nirv_collection = ee.ImageCollection('NASA/HLS/HLSL30/v002')
  .filterDate(startDate, endDate);
  
var loc_start = '2016-09-01';
var par_collection = ee.ImageCollection('MODIS/061/MCD18C2')
  .filterDate(loc_start, ee.Date(loc_start).advance(1, 'day'));

var n = strawberry_fields_high_conf.size().getInfo();
var field_list = strawberry_fields_high_conf.toList(n);

for (var i = 0; i < n; i++) {
  
  print(i);
  index = ee.Number(i); 
  var crop_field = field_list.get(i);
  // Filter NIRV data for the specific field
  var nirv_field = nirv_collection.filterBounds(crop_field.geometry())
                                  .map(maskClouds)
                                  .map(dataset_ndvi)
                                  .map(dataset_nirv)
                                  .select(['NIRV']);
  var par_field = par_collection.filterBounds(crop_field.geometry());
  
  nirv_field = gpp_utils.interpolateCollection(nirv_field, 10, crop_field.geometry());
  nirv_field = gpp_utils.applySGFilter(nirv_field, 3);
  nirv_field = gpp_utils.alignCollections(par_field, nirv_field.select(['d_0_NIRV']), crop_field.geometry());
  
  var nirvp_field = nirv_field.map(multiplyBands).first();
              
  var processed_collection = nirv_field.map(function(image) {
    return gpp_utils.applyHyperbola(image, bands, 0.7478, 105.2422)
  });
  
  var image_id = ee.String('field_').cat(index.format());
  var assetId = ee.String('users/kevinlc3/california_gpp_map/').cat(image_id);

  // The Export call needs to be handled differently since it's a client-side operation
  // You can't directly use index or crop_field in the Export parameters
  
  var export_bands = 
              ['NIRVP0000_Hyperbola_GPP',
              'NIRVP0300_Hyperbola_GPP',
              'NIRVP0600_Hyperbola_GPP',
              'NIRVP0900_Hyperbola_GPP',
              'NIRVP1200_Hyperbola_GPP',
              'NIRVP1500_Hyperbola_GPP',
              'NIRVP1800_Hyperbola_GPP',
              'NIRVP2100_Hyperbola_GPP']
  // Create an export task and start it
  Export.image.toAsset({
    image: processed_collection.select(export_bands[6]), // Assuming processed_collection is the image to be exported
    description: image_id,
    assetId: assetId,
    scale: 30,
    region: crop_field.geometry(),
    maxPixels: 1e9
  });
}
